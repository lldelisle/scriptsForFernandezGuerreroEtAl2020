#       cmd <- paste0("with(temp.df, which(", paste(inOverlap, "> 0", collapse = " & "), "))")
#     } else {
#       cmd <- paste0("with(temp.df, which(", paste(inOverlap, "> 0", collapse = " & "), " & ",
#                     paste(absentInOverlap, "== 0", collapse = " & "), "))")
#     }
#     clusters <- eval(parse(text = cmd))
#     peaksNumbers <- colSums(temp.df[clusters, inOverlap])
#     p$children$canvas.grob$children$diagram.grob.1$children$tags$children[[i]]$children[[2]]$label <-
#       paste(combinations[j], "clusters\n", paste(peaksNumbers, collapse = ","), "peaks")
#   }
# }
# print(p)
}
# If you stored them in a pdf, do not forget to close the pdf:
#  dev.off()
devtools::install_github("lldelisle/analysePeaks")
pathWithInput <-"~/Documents/sequencing/hichip/"
df <- read.delim(file.path(pathWithInput,"diff_peakGSM1039558_loops.bed"))
pathWithInput <-"~/Documents/sequencing/Rushi/hichip/"
df <- read.delim(file.path(pathWithInput,"diff_peakGSM1039558_loops.bed"))
head(df)
options(stringsAsFactors=F)
source('~/Documents/sequencing/analysisWithLucilleScripts_20191202/step4-graphVolcanoAndMAP_v2.2.R')
source('~/Documents/sequencing/analysisWithLucilleScripts_20191202/step4-graphVolcanoAndMAP_v2.2.R')
wilcox.test(c(1.2,1,0.8), c(0.5,.4,0.3))
wilcox.test(c(1.2,1,0.8), c(0.7,.4,0.3))
wilcox.test(c(1.2,1,0.8), c(0.7,.6,0.5))
wilcox.test(c(1.2,1,0.8), c(0.7,.6,0.5, 0.4))
wilcox.test(c(1.2,1,0.8, 0.72), c(0.7,.6,0.5, 0.4))
x <- c(6, 7, 7, 8, 9, 9)
y1 <- c(0, 1.1, 0.9, 1.02, 1.01, 1.05)
y2 <- c(0, 0.02, 0.05, 0.5, 1, 0.9)
p.adjust(c(0.0002, 0.5, 0.8), method = "BH")
data.dir <- /home/ldelisle/mountDuboule/Alex/Lucille/GSE114186_e9-5/
data.dir <- "/home/ldelisle/mountDuboule/Alex/Lucille/GSE114186_e9-5/"
barcode.loc <- list.files(data.dir, pattern = "CellData.csv.gz", full.names = T)
features.loc <- list.files(data.dir, pattern = "GeneData.csv.gz", full.names = T)
matrix.loc <- list.files(data.dir, pattern = "X.csv.gz", full.names = T)
cell.names <- readLines(barcode.loc)
cell.names
cell.names <- read.csv(file = gzfile(barcode.loc), header = F)
head(cell.names)
cell.names <- read.csv(file = gzfile(barcode.loc), header = T)
head(cell.names)
features.df <- read.csv(file = gzfile(features.loc), header = T)
head(features.df)
cell.df <- read.csv(file = gzfile(barcode.loc), header = T)
grep("ATAC|DNASE", c("ATAC-Seq",  "DNase"), value = T, ignore.case = T)
.libPaths()
install.packages(c("blob", "cli", "future", "future.apply", "gh", "gplots", "hms", "htmlTable", "knitr", "latticeExtra", "leiden", "metap", "pillar", "pkgmaker", "Rdpack", "reticulate", "rmarkdown", "RNeXML", "roxygen2", "RSQLite", "rversions", "sctransform", "SDMTools", "Seurat", "testthat", "tidyr", "tidyselect", "tinytex", "TTR", "uwot", "vctrs", "xts", "zoo"))
install.packages("metap")
install.packages("Seurat")
install.packages("multtest")
usefulLDfunctions::safelyLoadAPackageInCRANorBioconductor("multtest")
install.packages("Seurat")
library(rtracklayer)
gtf <- readGFF("~/Desktop/Leo/Homo_sapiens.GRCh37.87.ForUCSC.gtf")
line <- readLines("~/Desktop/Leo/Homo_sapiens.GRCh37.87.ForUCSC.gtf")[2612618]
line
line <- readLines("~/Desktop/Leo/Homo_sapiens.GRCh37.87.ForUCSC.gtf")[2612678]
line <- readLines("~/Desktop/Leo/Homo_sapiens.GRCh37.87.ForUCSC.gtf")[2612617]
line <- readLines("~/Desktop/Leo/Homo_sapiens.GRCh37.87.ForUCSC.gtf")[2612618]
linem1 <- readLines("~/Desktop/Leo/Homo_sapiens.GRCh37.87.ForUCSC.gtf")[2612617]
linep1 <- readLines("~/Desktop/Leo/Homo_sapiens.GRCh37.87.ForUCSC.gtf")[2612619]
cat(line)
cat(linep1)
cat(linem1)
options(scipen=999)
options(stringsAsFactors = F)
rm(list=ls())
###### Install missing packages and load them ######
if(!"zoo"%in%installed.packages()){
install.packages("zoo",repos = "https://stat.ethz.ch/CRAN/")
}
#### GET PARAMETER FILE ####
if(length(commandArgs(TRUE))>0){
f<-commandArgs(TRUE)[1]
} else{
#Ask for the config file
f <- file.choose()
}
#### CHECK EVERYTHING IS READY ####
#Check the parameter file exists and source it
if(!file.exists(f)){
stop("This file does not exist.")
}
source(f)
#Check if the 4C_function is defined and present
if(!exists("pathForFunctions4C")){
stop("No path for functions.")
} else if(!file.exists(pathForFunctions4C)){
stop(paste("This file does not exists:",pathForFunctions4C))
}
source(pathForFunctions4C)
if(!exists(".p4cWinGeoMeanCoordinate")){
stop("4Cfunction with version >= 03 is required.")
}
#Check the required parameters
pathForVPNameAndPos<-checkFile("pathForVPNameAndPos")
vpPosDF<-read.delim(pathForVPNameAndPos,h=F)
if(!ncol(vpPosDF)==2){
stop("Invalid VPNameAndPos table, expected 2 columns")
}
if(!is.numeric(vpPosDF[1,2])){
stop("Invalid VPNameAndPos table, expected numbers only in column 2 (no header)")
}
if(!exists("myChr")){
stop("myChr is not defined but required to output bedgraphs.")
}
folderWithInputs<-checkFolder("folderWithInputs")
#### PREPARE INPUT FROM 4C BW ####
#Find all files which looks like segToFrag_BLABLABLA.bw in the folder specified
allBW<-list.files(folderWithInputs,"segToFrag_.*\\.bw$")
#If you have, check if the inputMat are already present.
if(length(allBW)>0){
#Guess the name of the corresponding inputMat
allInputMatOfBW<-paste0(sapply(allBW,function(s){gsub(".bw$|^segToFrag_","",s)}),".inputMat")
names(allInputMatOfBW)<-allBW
} else {
allInputMatOfBW<-character(0)
}
#Find all inputMat
matrices<-list.files(folderWithInputs,".inputMat$")
#Check if you have bw file which does not have corresponding inputMat
missingInputMat<-setdiff(allInputMatOfBW,matrices)
if(length(missingInputMat)>0){
#You will need a template
template<-checkFile("template")
#Select the bw which does not have inputMat
BWToTransform<-names(allInputMatOfBW[allInputMatOfBW%in%missingInputMat])
#If rtracklayer is not installed, install it.
if(!tryCatch(require(rtracklayer,quietly = T),warning=function(w){F})){
cat("Will install rtracklayer to read bigwig.\n")
tryCatch(source("https://bioconductor.org/biocLite.R"),error=function(e){source("http://bioconductor.org/biocLite.R")})
biocLite("rtracklayer",suppressUpdates = T,suppressAutoUpdate = T,ask = F)
library(rtracklayer)
}
cat("Reading template segToFrag...")
templateDF<-readBed(template)[,1:3]
cat("Done.\n")
#Restrict it to the chromosome of interest
templateDF<-subset(templateDF,V1==myChr)
if(nrow(templateDF)==0){
stop("myChr is not part of the template you provided.")
}
#put the folder as prefix to be able to generate inputMat at the same place
filesToWriteInput<-lapply(BWToTransform,function(s){paste0(folderWithInputs,"/",s)})
cat("Writing missing inputMat from segToFrag bigwigs...")
#This will write inputMat which asign to each middle of fragment 0 if it was not sequenced and the score in the bw if it is present.
writeInputMatFromBW(filesToWriteInput,templateDF,myChr)
cat("Done.\n")
}
#### PREPARE INPUT FROM UMI-4C BDG ####
#Find all bedGraphs files in the folder specified
allBDG<-list.files(folderWithInputs,".b(e)*(d)*[g|G](raph)*(\\.gz)*$")
#If you have, check if the inputMat are already present.
if(length(allBDG)>0){
#Guess the name of the corresponding inputMat
allInputMatOfBDG<-paste0(sapply(allBDG,tools::file_path_sans_ext),".inputMat")
names(allInputMatOfBDG)<-allBDG
} else {
allInputMatOfBDG<-character(0)
}
#Find all inputMat
matrices<-list.files(folderWithInputs,".inputMat$")
#Check if you have bw file which does not have corresponding inputMat
missingInputMat<-setdiff(allInputMatOfBDG,matrices)
if(length(missingInputMat)>0){
#Select the bdg which does not have inputMat
BDGToTransform<-names(allInputMatOfBDG[allInputMatOfBDG%in%missingInputMat])
#put the folder as prefix to be able to generate inputMat at the same place
filesToWriteInput<-lapply(BDGToTransform,function(s){paste0(folderWithInputs,"/",s)})
cat("Writing missing inputMat...")
#This will write inputMat.
writeInputMatFromBedGraph(filesToWriteInput,NULL,myChr)
cat("Done.\n")
}
##############
matrices<-list.files(folderWithInputs,".inputMat$")
length(matrices)>1
###Check the analysis required parameters####
#For each matrix we should find the vp position
colnames(vpPosDF)<-c("name","pos")
allVpPos<-NULL
#For each inputMat file, will look for the viewpoint:
#From all viewpoint name in the viewPointPosition file, it will use the longest which is included in the file name.
#For example BlablaHoxd13Blabla, both Hoxd1 and Hoxd13 are included so Hoxd13 (higher number of characters) will be chosen.
#So if you have an ambiguity, put in the viewPointPosition.txt file as name the full file name.
for(inputMatFile in matrices){
curVP<-unique(findVPcoo(inputMatFile,vpPosDF))
if(!length(curVP)==1){
if(length(curVP)==0){
stop(paste("For",inputMatFile,": no viewpoint found in the name. Please change the VPNameAndPos file."))
} else {
stop(paste("For",inputMatFile,":",length(vpPos)," viewpoints found in the name with the coordinates:",paste(curVP,collapse=","),". Please change the VPNameAndPos file."))
}
}
allVpPos<-c(allVpPos,curVP)
}
names(allVpPos)<-matrices
allVpPos
#Check the outputFormat and if HTSStyle is part of them check you have the template.
outputFormat<-unlist(checkStrings("outputFormat",c("TanayStyle","ClassicStyle","HTSStyle"),"TanayStyle"))
#You will need a template
if(!exists("templateDF")){
template<-checkFile("template","NA")
if(template=="NA"){
cat("HTSStyle was set as outputFormat but no template is provided.\n")
if(length(outputFormat)==1){
stop("This was the only output. The script stops.")
} else {
outputFormat<-setdiff(outputFormat,"HTSStyle")
cat("There will not be HTSStyle output.\n")
}
} else {
cat("Reading template segToFrag...")
templateDF<-readBed(template)[,1:3]
cat("Done.\n")
#Restrict it to the chromosome of interest
templateDF<-subset(templateDF,V1==myChr)
if(nrow(templateDF)==0){
cat("HTSStyle was set as outputFormat but myChr is not part of the template you provided.\n")
if(length(outputFormat)==1){
stop("This was the only output. The script stops.")
} else {
outputFormat<-setdiff(outputFormat,"HTSStyle")
cat("There will not be HTSStyle output.\n")
}
}
}
}
distanceToRemoveAroundVP<-unlist(checkNumericalValues("distanceToRemoveAroundVP",default = 0))[1]
if(distanceToRemoveAroundVP<0){
cat("distanceToRemoveAroundVP is negative. 0 will be used.\n")
distanceToRemoveAroundVP<-0
}
smoothThrough<-checkLogicalValue("smoothThrough",F)
smoothAfter<-checkLogicalValue("smoothAfter",F)
replaceNAby0<-checkLogicalValue("replaceNAby0",F)
if(!exists("outputFolder")){
outputFolder<-paste0(folderWithInputs,"/",gsub(" ","_",Sys.time()))
cat("The bedgraphs will be in :")
cat(outputFolder)
cat("\n")
} else{
if(!dir.exists(outputFolder)){
dir.create(outputFolder)
}
}
nbsOfFragmentPerWindow<-unlist(checkNumericalValues("nbsOfFragmentPerWindow",11))
#Add the folder as prefix
matrices<-sapply(matrices,function(s){paste0(folderWithInputs,"/",s)})
nbsOfFragmentPerWindow
nbOfFragmentPerWindow <- 21
cat("nbOfFragmentPerWindow=",nbOfFragmentPerWindow,"\n")
i<-1
inputMatFile<-matrices[i]
name<-head(strsplit(basename(tools::file_path_sans_ext(inputMatFile)),"_rep")[[1]],1)
vp<-allVpPos[i]
profile<-read.delim(inputMatFile,h=F)
colnames(profile)<-c("pos","score")
if(anyDuplicated(profile$pos)!=0){
profile<-aggregate(list(score=profile$score),by=list(pos=profile$pos),FUN=sum)
}
profile<-profile[order(profile$pos),]
profile$chr<-myChr
profile
subset(profile, score !=0)
if(smoothAfter){
profile$score[abs(profile$pos-vp)<distanceToRemoveAroundVP]<-0
}
if(smoothThrough){
smooth<-profile
smooth$smoothed<-rollMean(smooth$score,nbOfFragmentPerWindow)
} else {
before<-profile[profile$pos<vp,]
after<-profile[profile$pos>vp,]
before$smoothed<-rollMean(before$score,nbOfFragmentPerWindow)
after$smoothed<-rollMean(after$score,nbOfFragmentPerWindow)
smooth<-rbind(before,after)
}
if(!smoothAfter){
smooth$score[abs(smooth$pos-vp)<distanceToRemoveAroundVP]<-NA
}
head(smooth)
head(subset(smooth, smoothed != 0))
if(replaceNAby0){
smooth$score[is.na(smooth$score)]<-0
}
header<-paste0("track type=bedGraph name=",name,"_smoothed",nbOfFragmentPerWindow,"frags_HTSStyle\n")
outputFile<-paste0(outputFolder,"/",name,"_smoothed",nbOfFragmentPerWindow,"frags_HTSStyle.bedGraph")
cat(header,file=outputFile)
v <- runif(100)
plot(cumsum(v))
plot(cumsum(sort(v)))
plot(cumsum(sort(v))/sum(v))
plot(sort(v),cumsum(sort(v))/sum(v))
v <- runif(1000)
plot(sort(v),cumsum(sort(v))/sum(v), type = 'l')
summary(v)
plot(cumsum(sort(v))/sum(v), type = 'l')
plot(sort(v),1:length(v), type = 'l')
plot(sort(v),(1:length(v))/length(v), type = 'l')
plot(sort(v),seq(0,1,length.out = length(v)), type = 'l')
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "")
v <- rnorm(1000, 5)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "")
lines(sort(2*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.1*v), seq(0, 1, length.out = length(v)), col = "blue")
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "")
lines(sort(1.1*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.2*v), seq(0, 1, length.out = length(v)), col = "red")
n <- 250
v <- runif(n)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "")
v <- rnorm(n, 5)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "")
lines(sort(1.1*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.2*v), seq(0, 1, length.out = length(v)), col = "red")
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 9))
lines(sort(1.1*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.2*v), seq(0, 1, length.out = length(v)), col = "red")
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 9), main = "Normal distribution")
lines(sort(1.1*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.2*v), seq(0, 1, length.out = length(v)), col = "red")
legend("topleft", legend = c("original", "+10%", "+20%"))
legend("topleft", legend = c("original", "+10%", "+20%"), col = c("black", "blue", "red"), lty = 1)
v <- rnorm(n, mean(v), 2 * sd(v))
lines(sort(v), seq(0, 1, length.out = length(v)), col = "blue")
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 9), main = "Normal distribution")
v <- rnorm(n, mean(v), 2 * sd(v))
lines(sort(v), seq(0, 1, length.out = length(v)), col = "blue")
v <- rnorm(n, mean(v), 1.2 * sd(v))
lines(sort(v), seq(0, 1, length.out = length(v)), col = "blue")
v <- rnorm(n, 5)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 9), main = "Normal distribution")
lines(sort(1.1*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.2*v), seq(0, 1, length.out = length(v)), col = "red")
legend("topleft", legend = c("original", "+10%", "+20%"), col = c("black", "blue", "red"), lty = 1)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 9), main = "Normal distribution")
v2 <- rnorm(n, mean(v), 1.2 * sd(v))
lines(sort(v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(v2), seq(0, 1, length.out = length(v)), col = "blue")
v2 <- rnorm(n, 1.2*mean(v), 1.2 * sd(v))
lines(sort(v2), seq(0, 1, length.out = length(v)), col = "blue")
v2 <- rnorm(n, mean(v) / 2, 0.5 * sd(v))
lines(sort(v2), seq(0, 1, length.out = length(v)), col = "blue")
v <- rnorm(n, 5)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 9), main = "Normal distribution")
lines(sort(0.5*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.2*v), seq(0, 1, length.out = length(v)), col = "red")
lines(sort(1.5*v), seq(0, 1, length.out = length(v)), col = "red")
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 11), main = "Normal distribution")
lines(sort(0.5*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.5*v), seq(0, 1, length.out = length(v)), col = "red")
legend("topleft", legend = c("original", "-50%", "+50%"), col = c("black", "blue", "red"), lty = 1)
legend("bottomright", legend = c("original", "-50%", "+50%"), col = c("black", "blue", "red"), lty = 1)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 11), main = "Normal distribution")
lines(sort(0.5*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.5*v), seq(0, 1, length.out = length(v)), col = "red")
legend("bottomright", legend = c("original", "-50%", "+50%"), col = c("black", "blue", "red"), lty = 1)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 11), main = "Normal distribution")
v2 <- rnorm(n, mean(v), 0.5 * sd(v))
lines(sort(v2), seq(0, 1, length.out = length(v)), col = "blue")
v3 <- rnorm(n, mean(v), 1.5 * sd(v))
lines(sort(v3), seq(0, 1, length.out = length(v)), col = "red")
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 11), main = "Normal distribution")
v2 <- rnorm(n, mean(v), 0.5 * sd(v))
lines(sort(v2), seq(0, 1, length.out = length(v)), col = "blue")
v3 <- rnorm(n, mean(v), 1.5 * sd(v))
lines(sort(v3), seq(0, 1, length.out = length(v)), col = "red")
v3 <- rnorm(n, 1.5 * mean(v), sd(v))
lines(sort(v3), seq(0, 1, length.out = length(v)), col = "green")
legend("topleft", legend = c("original", "SD -50%", "SD +50%", "Mean + 50%"), col = c("black", "blue", "red",  "green"), lty = 1)
n <- 1000
v <- runif(n)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "")
v <- rnorm(n, 5)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 11), main = "Normal distribution")
lines(sort(0.5*v), seq(0, 1, length.out = length(v)), col = "blue")
lines(sort(1.5*v), seq(0, 1, length.out = length(v)), col = "red")
legend("bottomright", legend = c("original", "-50%", "+50%"), col = c("black", "blue", "red"), lty = 1)
plot(sort(v), seq(0, 1, length.out = length(v)), type = 'l', ylab = "Cumulative fraction", xlab = "", xlim = c(0, 11), main = "Normal distribution")
v2 <- rnorm(n, mean(v), 0.5 * sd(v))
lines(sort(v2), seq(0, 1, length.out = length(v)), col = "blue")
v3 <- rnorm(n, mean(v), 1.5 * sd(v))
lines(sort(v3), seq(0, 1, length.out = length(v)), col = "red")
v3 <- rnorm(n, 1.5 * mean(v), sd(v))
lines(sort(v3), seq(0, 1, length.out = length(v)), col = "green")
legend("topleft", legend = c("original", "SD -50%", "SD +50%", "Mean + 50%"), col = c("black", "blue", "red",  "green"), lty = 1)
###############
#### Plot marker genes ####
here<-"/home/ldelisle/Dropbox/scripts/RNAseq/MarianFromScratchSTAR93/"
outputFolder<-"~/Dropbox/forMarian/__analysesWithResequenced_merged93/"
what<-"FPKM"
source(paste0(here,"toLoadFirst_2.R"))
source(RNAseqFunctionPath)
source(paste0(here,"plotHeatMaps.R"))
devtools::install_github("lldelisle/usefulLDfunctions")
library(usefulLDfunctions)
safelyLoadAPackageInCRANorBioconductor("pheatmap")
safelyLoadAPackageInCRANorBioconductor("RColorBrewer")
###############
#### Plot marker genes ####
here<-"/home/ldelisle/Dropbox/scripts/RNAseq/MarianFromScratchSTAR93/"
outputFolder<-"~/Dropbox/forMarian/__analysesWithResequenced_merged93/"
what<-"FPKM"
source(paste0(here,"toLoadFirst_2.R"))
source(RNAseqFunctionPath)
source(paste0(here,"plotHeatMaps.R"))
samplesPlanDFcopy<-read.delim(samplesPlan,stringsAsFactors=T)
samplesPlanDF<-samplesPlanDFcopy
expressionDF<-read.delim(FPKMfile)
samplesToPlot <- intersect(samplesPlanDF$sample,colnames(expressionDF))
expressionDF[,samplesToPlot]<-list(NULL)
samplesToPlot<-intersect(samplesPlanDF$sample,unlist(lapply(strsplit(colnames(expressionDF),"^FPKM_"),function(x){if(length(x)>1){return(x[2])}})))
colnames(expressionDF)<-gsub("^FPKM_","",colnames(expressionDF))
expressionDF<-expressionDF[,c(colnames(expressionDF)[1:3],samplesToPlot)]
factorizedSP<-simplifyDF(samplesPlanDF,samplesToPlot,keepFactorsWithOneValue=T)
#The expressionDFcopy is not filtered for pc genes.
genesToPlot<-intersect(paste0("Hox", rep(letters[1:4], each =13), rep(1:13, 4)), expressionDF$gene_short_name)
#The expressionDFcopy is not filtered for pc genes.
genesToPlot<-c("Fgf8", "Sp6", "Trp63", "Perp", "Krt14", "Sp8", "Wnt7a", "Prrx1", "Tbx5", "Hoxa9", "Hoxd10", "Fgf10", "Pecam1", "Cdh5")
pdf(file.path(outputFolder,"ECTMES_genes.pdf"),
title = paste0("ECT MES genes"),
width = 10, height = 3+0.23*length(genesToPlot))
plotFixedlogValues(genesToPlot,"gene_short_name",expressionDF,samples=factorizedSP, keepOrder = F,
main="log2(FPKM+1)")
dev.off()
## TEST GITHUB
setwd("~/Documents/Marian/onGitHub/RNAseq/")
options(stringsAsFactors=F)
if (!"devtools" %in% installed.packages()){
install.packages("devtools", repos = "https://stat.ethz.ch/CRAN/")
}
devtools::install_github("lldelisle/usefulLDfunctions")
library(usefulLDfunctions)
safelyLoadAPackageInCRANorBioconductor("pheatmap")
safelyLoadAPackageInCRANorBioconductor("RColorBrewer")
safelyLoadAPackageInCRANorBioconductor("ggplot2")
source("RNAseqFunctions.R")
# To have consistent colors in all heatmaps/PCA
colTissue <- c(rgb(252, 124, 118, maxColorValue=255),
rgb(23, 183, 255, maxColorValue=255))
names(colTissue) <- c("ECT", "MES")
colReplicate<-c("chartreuse", "gold")
names(colReplicate)<-c(1, 2)
cc<-colorRampPalette(rev(brewer.pal(n=7, name="RdYlBu")))(103)
FPKMfile <- "/scratch/ldelisle/Merged93/mergedTables/AllCufflinks_Simplified.txt"
#Only locally:
FPKMfile <- "/home/ldelisle/Documents/Marian/GEO/AllCufflinks_Simplified.txt"
nGenesToRestrictPCA <- 500
samplesPlanDF <- read.delim("samplesplan.txt", stringsAsFactors=T)
expressionDF <- read.delim(FPKMfile)
samplesToPlot <- as.character(samplesPlanDF$sample)
colnames(expressionDF)<-gsub("^FPKM_","",colnames(expressionDF))
expressionDF<-expressionDF[,c(colnames(expressionDF)[1:3],samplesToPlot)]
factorizedSP <- simplifyDF(samplesPlanDF, samplesToPlot, keepFactorsWithOneValue=T)
# For heatmaps:
annC <- data.frame(tissue = factorizedSP$tissue)
rownames(annC) <- rownames(factorizedSP)
anno_colors <- list(tissue=colTissue)
genesToPlot<-intersect(paste0("Hox", rep(letters[1:4], each =13), rep(1:13, 4)), expressionDF$gene_short_name)
# Create a small dataframe with only expression for the genes to plot
df.sub <- expressionDF[expressionDF$gene_short_name %in% genesToPlot, rownames(factorizedSP)]
# Do a log2 transformation
df.sub <- log2(df.sub + 1)
# Put the rownames:
rownames(df.sub) <- expressionDF$gene_short_name[expressionDF$gene_short_name %in% genesToPlot]
# Keep the order
df.sub <- df.sub[genesToPlot, ]
# The scalebar is built so that minimum color is 0 and maximum color is 12 even if larger values exists
epsilon <- 0.0000001
breaksListAbs <- c(seq(0, 12, length.out=100), max(max(df.sub), 12) + epsilon)
pheatmap(df.sub, cluster_rows=FALSE, show_rownames=TRUE, breaks=breaksListAbs, color=cc,
cluster_cols=FALSE, annotation_col=annC, fontsize=15, cellwidth=20, cellheight=16,
annotation_colors=anno_colors, main="log2(FPKM+1)", labels_col = factorizedSP$stageRep,
labels_row = gsub("Hox", "", rownames(df.sub)), angle_col = 90)
genesToPlot <- c("Fgf8", "Sp6", "Trp63", "Perp", "Krt14", "Sp8", "Wnt7a", "Prrx1", "Tbx5", "Hoxa9", "Hoxd10", "Fgf10", "Pecam1", "Cdh5")
# Create a small dataframe with only expression for the genes to plot
df.sub <- expressionDF[expressionDF$gene_short_name %in% genesToPlot, rownames(factorizedSP)]
# Do a log2 transformation
df.sub <- log2(df.sub + 1)
# Put the rownames:
rownames(df.sub) <- expressionDF$gene_short_name[expressionDF$gene_short_name %in% genesToPlot]
# The scalebar is built so that minimum color is 0 and maximum color is 12 even if larger values exists
epsilon <- 0.0000001
breaksListAbs <- c(seq(0, 12, length.out=100), max(max(df.sub), 12) + epsilon)
pheatmap(df.sub, cluster_rows=TRUE, show_rownames=TRUE, breaks=breaksListAbs, color=cc,
cluster_cols=FALSE, annotation_col=annC, fontsize=15, cellwidth=20, cellheight=16,
annotation_colors=anno_colors, main="log2(FPKM+1)", labels_col = factorizedSP$stageRep,
angle_col = 90)
data <- expressionDF[,samplesToPlot]
sumperline <- apply(data,1,sum)
nonZdata <- data[sumperline != 0,]
ldata <- log2(nonZdata + 1)
rldata <- ldata
rldata <- ldata[order(apply(ldata, 1, var), decreasing = T)[1:min(nrow(ldata), nGenesToRestrictPCA)], ]
sample.pca <- prcomp(t(rldata),
center = TRUE,
scale. = FALSE)
new.df <- data.frame(factorizedSP,sample.pca$x[samplesToPlot,])
var <- round((sample.pca$sdev) ^ 2 / sum(sample.pca$sdev ^ 2) * 100)
ggplot(new.df, aes(PC1, PC2)) +
geom_point(aes(fill=tissue, color=Replicate, shape=stage), stroke=1, size=3) +
theme_grey(base_size = 20) +
xlab(paste0("PC1: ", var[1], "% variance")) +
ylab(paste0("PC2: ", var[2], "% variance")) +
scale_fill_manual(values=colTissue)+
scale_color_manual(values=colReplicate)+
scale_shape_manual(values=21:24) +
guides(fill=guide_legend(override.aes = list(shape = 21)), alpha=guide_legend(override.aes = list(shape = 21)), color=guide_legend(override.aes = list(shape = 21)))
